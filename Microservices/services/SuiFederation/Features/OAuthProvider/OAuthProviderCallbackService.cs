using System.Text.Json;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Models;
using Beamable.SuiFederation.Extensions;
using Beamable.SuiFederation.Features.Notifications;
using Beamable.SuiFederation.Features.Notifications.Models;
using Beamable.SuiFederation.Features.OAuthProvider.Exceptions;
using Beamable.SuiFederation.Features.OAuthProvider.Models;
using Beamable.SuiFederation.Features.OAuthProvider.Storage.Models;

namespace Beamable.SuiFederation.Features.OAuthProvider;

public class OAuthProviderCallbackService : IService
{
    private readonly PlayerNotificationService _playerNotificationService;
    private readonly OauthProviderResolver _oauthProviderResolver;

    public OAuthProviderCallbackService(PlayerNotificationService playerNotificationService, OauthProviderResolver oauthProviderResolver)
    {
        _playerNotificationService = playerNotificationService;
        _oauthProviderResolver = oauthProviderResolver;
    }


    public async Task<CommonResponse> ProcessCallback(string body)
    {
        var callbackModel = JsonSerializer.Deserialize<OauthCallbackRequest>(body) ?? throw new OauthProviderException("Unable to parse OAuth callback payload.");
        var state = CreateOAuthStatePayloadExtensions.ParseState(callbackModel.State);

        var oauthProvider = _oauthProviderResolver.Resolve(state.Provider);
        var oauthRequest = await oauthProvider.Validate(callbackModel);

        if (oauthRequest.State != OAuthResult.Authorized)
        {
            await _playerNotificationService.SendPlayerNotification(state.GamerTag, new OAuthNotification
            {
                Id = oauthRequest.Id,
                State = OAuthState.Denied
            });

            return CommonResponseExtensions.FailedResult();
        }

        await _playerNotificationService.SendPlayerNotification(state.GamerTag, new OAuthNotification
        {
            Id = oauthRequest.Id,
            State = OAuthState.Authorized
        });

        return CommonResponseExtensions.OkResult();
    }
}